{"ast":null,"code":"import { ActionSheetIOS, Linking } from \"react-native\";\nimport { EmailException } from \"./email-exception\";\nconst prefixes = {\n  \"apple-mail\": \"message://\",\n  gmail: \"googlegmail://\",\n  inbox: \"inbox-gmail://\",\n  spark: \"readdle-spark://\",\n  airmail: \"airmail://\",\n  outlook: \"ms-outlook://\",\n  yahoo: \"ymail://\",\n  superhuman: \"superhuman://\",\n  yandex: \"yandexmail://\",\n  fastmail: \"fastmail://\",\n  protonmail: \"protonmail://\"\n};\nconst titles = {\n  \"apple-mail\": \"Mail\",\n  gmail: \"Gmail\",\n  inbox: \"Inbox\",\n  spark: \"Spark\",\n  airmail: \"Airmail\",\n  outlook: \"Outlook\",\n  yahoo: \"Yahoo Mail\",\n  superhuman: \"Superhuman\",\n  yandex: \"Yandex\",\n  fastmail: \"Fastmail\",\n  protonmail: \"ProtonMail\"\n};\n/**\n * Allowed params for each app url\n *  - apple-mail: https://ios.gadgethacks.com/news/always-updated-list-ios-app-url-scheme-names-0184033/\n *  - gmail: https://stackoverflow.com/questions/32114455/open-gmail-app-from-my-app\n *  - inbox: https://stackoverflow.com/questions/29655978/is-there-an-ios-mail-scheme-url-for-googles-inbox\n *  - spark: https://helpspot.readdle.com/spark/index.php?pg=kb.page&id=791\n *  - airmail: https://help.airmailapp.com/en-us/article/airmail-ios-url-scheme-1q060gy/\n *  - outlook: https://stackoverflow.com/questions/32369198/i-just-want-to-open-ms-outlook-app-and-see-mailto-screen-using-url-scheme-at-ios\n *  - fastmail: https://github.com/vtourraine/ThirdPartyMailer/blob/1.8.0/Sources/ThirdPartyMailer/ThirdPartyMailClient.swift#L80\n */\n\nconst uriParams = {\n  \"apple-mail\": {\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\"\n  },\n  gmail: {\n    path: \"co\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\"\n  },\n  inbox: {\n    path: \"co\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\"\n  },\n  spark: {\n    path: \"compose\",\n    to: \"recipient\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\"\n  },\n  airmail: {\n    path: \"compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"htmlBody\"\n  },\n  outlook: {\n    path: \"compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\"\n  },\n  yahoo: {\n    path: \"mail/compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\"\n  },\n  superhuman: {\n    path: \"compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\"\n  },\n  yandex: {\n    path: \"compose\"\n  },\n  fastmail: {\n    path: \"mail/compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\"\n  },\n  protonmail: {\n    path: \"compose\"\n  }\n};\n/**\n * Returns param to open app compose screen and pre-fill 'to', 'subject' and 'body',\n * @param {string} app\n * @param {{\n *     to: string,\n *     cc: string,\n *     bcc: string,\n *     subject: string,\n *     body: string,\n * }} options\n */\n\nfunction getUrlParams(app, options) {\n  const appParms = uriParams[app];\n\n  if (!appParms) {\n    return \"\";\n  }\n\n  const path = app === \"apple-mail\" ? options.to || \"\" : appParms.path;\n  const urlParams = Object.keys(appParms).reduce((params, currentParam) => {\n    if (options[currentParam]) {\n      params.push(`${appParms[currentParam]}=${options[currentParam]}`);\n    }\n\n    return params;\n  }, []);\n  return `${path}?${urlParams.join(\"&\")}`;\n}\n/**\n * Check if a given mail app is installed.\n *\n * @param {string} app\n * @returns {Promise<boolean>}\n */\n\n\nexport function isAppInstalled(app) {\n  return new Promise(resolve => {\n    if (!(app in prefixes)) {\n      return resolve(false);\n    }\n\n    Linking.canOpenURL(prefixes[app]).then(isSupported => {\n      resolve(isSupported);\n    }).catch(() => resolve(false));\n  });\n}\n/**\n * Ask the user to choose one of the available mail apps.\n * @param title\n * @param message\n * @param cancelLabel\n * @param removeText\n * @returns {Promise<String|null>}\n */\n\nexport function askAppChoice() {\n  let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Open mail app\";\n  let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Which app would you like to open?\";\n  let cancelLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Cancel\";\n  let removeText = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return new Promise(async (resolve, reject) => {\n    let availableApps = [];\n\n    for (let app in prefixes) {\n      let avail = await isAppInstalled(app);\n\n      if (avail) {\n        availableApps.push(app);\n      }\n    }\n\n    if (!availableApps.length) {\n      return reject(new EmailException(\"No email apps available\"));\n    }\n\n    if (availableApps.length === 1) {\n      return resolve(availableApps[0]);\n    }\n\n    let options = availableApps.map(app => titles[app]);\n    options.push(cancelLabel);\n    ActionSheetIOS.showActionSheetWithOptions({\n      options: options,\n      cancelButtonIndex: options.length - 1,\n      ...(removeText ? {} : {\n        title,\n        message\n      })\n    }, buttonIndex => {\n      if (buttonIndex === options.length - 1) {\n        return resolve(null);\n      }\n\n      return resolve(availableApps[buttonIndex]);\n    });\n  });\n}\n/**\n * Returns the name of the app provided in the options object or the app selected by the user.\n * @param {{\n *     app: string | undefined | null,\n * }} options\n * @return string\n */\n\nasync function getApp(options) {\n  if (options && typeof options !== \"object\") {\n    throw new EmailException(\"First parameter must be an object of options.\");\n  }\n\n  if (\"app\" in options && options.app && Object.keys(prefixes).indexOf(options.app) < 0) {\n    throw new EmailException('Option `app` should be undefined, null, or one of the following: \"' + Object.keys(prefixes).join('\", \"') + '\".');\n  }\n\n  let {\n    app = null\n  } = options;\n\n  if (!app) {\n    const {\n      title,\n      message,\n      cancelLabel,\n      removeText\n    } = options;\n    app = await askAppChoice(title, message, cancelLabel, removeText);\n  }\n\n  return app;\n}\n/**\n * Open an email app, or let the user choose what app to open.\n *\n * @param {{\n *     app: string | undefined | null,\n *     title: string,\n *     message: string,\n *     cancelLabel: string,\n *     removeText: boolean\n * }} options\n */\n\n\nexport async function openInbox() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const app = await getApp(options);\n\n  if (!app) {\n    return null;\n  }\n\n  await Linking.openURL(prefixes[app]);\n  return {\n    app,\n    title: titles[app]\n  };\n}\n/**\n * Open an email app on the compose screen, or let the user choose what app to open on the compose screen.\n *\n * @param {{\n *     app: string | undefined | null,\n *     title: string,\n *     message: string,\n *     cancelLabel: string,\n *     removeText: boolean,\n *     to: string,\n *     cc: string,\n *     bcc: string,\n *     subject: string,\n *     body: string,\n *     encodeBody: boolean\n * }} options\n */\n\nexport async function openComposer(options) {\n  const app = await getApp(options);\n\n  if (!app) {\n    return null;\n  }\n\n  if (options.encodeBody) {\n    options.body = encodeURIComponent(options.body);\n  }\n\n  const params = getUrlParams(app, options);\n  let prefix = prefixes[app];\n\n  if (app === \"apple-mail\") {\n    // apple mail prefix to compose an email is mailto\n    prefix = \"mailto:\";\n  }\n\n  await Linking.openURL(`${prefix}${params}`);\n  return {\n    app,\n    title: titles[app]\n  };\n}","map":{"version":3,"sources":["/Users/zaid/portfolio-starter/node_modules/react-native-email-link/src/ios.js"],"names":["ActionSheetIOS","Linking","EmailException","prefixes","gmail","inbox","spark","airmail","outlook","yahoo","superhuman","yandex","fastmail","protonmail","titles","uriParams","cc","bcc","subject","body","path","to","getUrlParams","app","options","appParms","urlParams","Object","keys","reduce","params","currentParam","push","join","isAppInstalled","Promise","resolve","canOpenURL","then","isSupported","catch","askAppChoice","title","message","cancelLabel","removeText","reject","availableApps","avail","length","map","showActionSheetWithOptions","cancelButtonIndex","buttonIndex","getApp","indexOf","openInbox","openURL","openComposer","encodeBody","encodeURIComponent","prefix"],"mappings":"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","sourcesContent":["import { ActionSheetIOS, Linking } from \"react-native\";\nimport { EmailException } from \"./email-exception\";\n\nconst prefixes = {\n  \"apple-mail\": \"message://\",\n  gmail: \"googlegmail://\",\n  inbox: \"inbox-gmail://\",\n  spark: \"readdle-spark://\",\n  airmail: \"airmail://\",\n  outlook: \"ms-outlook://\",\n  yahoo: \"ymail://\",\n  superhuman: \"superhuman://\",\n  yandex: \"yandexmail://\",\n  fastmail: \"fastmail://\",\n  protonmail: \"protonmail://\",\n};\n\nconst titles = {\n  \"apple-mail\": \"Mail\",\n  gmail: \"Gmail\",\n  inbox: \"Inbox\",\n  spark: \"Spark\",\n  airmail: \"Airmail\",\n  outlook: \"Outlook\",\n  yahoo: \"Yahoo Mail\",\n  superhuman: \"Superhuman\",\n  yandex: \"Yandex\",\n  fastmail: \"Fastmail\",\n  protonmail: \"ProtonMail\",\n};\n\n/**\n * Allowed params for each app url\n *  - apple-mail: https://ios.gadgethacks.com/news/always-updated-list-ios-app-url-scheme-names-0184033/\n *  - gmail: https://stackoverflow.com/questions/32114455/open-gmail-app-from-my-app\n *  - inbox: https://stackoverflow.com/questions/29655978/is-there-an-ios-mail-scheme-url-for-googles-inbox\n *  - spark: https://helpspot.readdle.com/spark/index.php?pg=kb.page&id=791\n *  - airmail: https://help.airmailapp.com/en-us/article/airmail-ios-url-scheme-1q060gy/\n *  - outlook: https://stackoverflow.com/questions/32369198/i-just-want-to-open-ms-outlook-app-and-see-mailto-screen-using-url-scheme-at-ios\n *  - fastmail: https://github.com/vtourraine/ThirdPartyMailer/blob/1.8.0/Sources/ThirdPartyMailer/ThirdPartyMailClient.swift#L80\n */\nconst uriParams = {\n  \"apple-mail\": {\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\",\n  },\n  gmail: {\n    path: \"co\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\",\n  },\n  inbox: {\n    path: \"co\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\",\n  },\n  spark: {\n    path: \"compose\",\n    to: \"recipient\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\",\n  },\n  airmail: {\n    path: \"compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"htmlBody\",\n  },\n  outlook: {\n    path: \"compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\",\n  },\n  yahoo: {\n    path: \"mail/compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\",\n  },\n  superhuman: {\n    path: \"compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\",\n  },\n  yandex: {\n    path: \"compose\",\n  },\n  fastmail: {\n    path: \"mail/compose\",\n    to: \"to\",\n    cc: \"cc\",\n    bcc: \"bcc\",\n    subject: \"subject\",\n    body: \"body\",\n  },\n  protonmail: {\n    path: \"compose\",\n  },\n};\n\n/**\n * Returns param to open app compose screen and pre-fill 'to', 'subject' and 'body',\n * @param {string} app\n * @param {{\n *     to: string,\n *     cc: string,\n *     bcc: string,\n *     subject: string,\n *     body: string,\n * }} options\n */\nfunction getUrlParams(app, options) {\n  const appParms = uriParams[app];\n  if (!appParms) {\n    return \"\";\n  }\n\n  const path = app === \"apple-mail\" ? options.to || \"\" : appParms.path;\n  const urlParams = Object.keys(appParms).reduce((params, currentParam) => {\n    if (options[currentParam]) {\n      params.push(`${appParms[currentParam]}=${options[currentParam]}`);\n    }\n    return params;\n  }, []);\n\n  return `${path}?${urlParams.join(\"&\")}`;\n}\n\n/**\n * Check if a given mail app is installed.\n *\n * @param {string} app\n * @returns {Promise<boolean>}\n */\nexport function isAppInstalled(app) {\n  return new Promise((resolve) => {\n    if (!(app in prefixes)) {\n      return resolve(false);\n    }\n\n    Linking.canOpenURL(prefixes[app])\n      .then((isSupported) => {\n        resolve(isSupported);\n      })\n      .catch(() => resolve(false));\n  });\n}\n\n/**\n * Ask the user to choose one of the available mail apps.\n * @param title\n * @param message\n * @param cancelLabel\n * @param removeText\n * @returns {Promise<String|null>}\n */\nexport function askAppChoice(\n  title = \"Open mail app\",\n  message = \"Which app would you like to open?\",\n  cancelLabel = \"Cancel\",\n  removeText = false\n) {\n  return new Promise(async (resolve, reject) => {\n    let availableApps = [];\n    for (let app in prefixes) {\n      let avail = await isAppInstalled(app);\n      if (avail) {\n        availableApps.push(app);\n      }\n    }\n\n    if (!availableApps.length) {\n      return reject(new EmailException(\"No email apps available\"));\n    }\n    if (availableApps.length === 1) {\n      return resolve(availableApps[0]);\n    }\n\n    let options = availableApps.map((app) => titles[app]);\n    options.push(cancelLabel);\n\n    ActionSheetIOS.showActionSheetWithOptions(\n      {\n        options: options,\n        cancelButtonIndex: options.length - 1,\n        ...(removeText ? {} : { title, message }),\n      },\n      (buttonIndex) => {\n        if (buttonIndex === options.length - 1) {\n          return resolve(null);\n        }\n        return resolve(availableApps[buttonIndex]);\n      }\n    );\n  });\n}\n\n/**\n * Returns the name of the app provided in the options object or the app selected by the user.\n * @param {{\n *     app: string | undefined | null,\n * }} options\n * @return string\n */\nasync function getApp(options) {\n  if (options && typeof options !== \"object\") {\n    throw new EmailException(\"First parameter must be an object of options.\");\n  }\n\n  if (\n    \"app\" in options &&\n    options.app &&\n    Object.keys(prefixes).indexOf(options.app) < 0\n  ) {\n    throw new EmailException(\n      'Option `app` should be undefined, null, or one of the following: \"' +\n        Object.keys(prefixes).join('\", \"') +\n        '\".'\n    );\n  }\n\n  let { app = null } = options;\n\n  if (!app) {\n    const { title, message, cancelLabel, removeText } = options;\n    app = await askAppChoice(title, message, cancelLabel, removeText);\n  }\n\n  return app;\n}\n\n/**\n * Open an email app, or let the user choose what app to open.\n *\n * @param {{\n *     app: string | undefined | null,\n *     title: string,\n *     message: string,\n *     cancelLabel: string,\n *     removeText: boolean\n * }} options\n */\nexport async function openInbox(options = {}) {\n  const app = await getApp(options);\n\n  if (!app) {\n    return null;\n  }\n\n  await Linking.openURL(prefixes[app]);\n  return { app, title: titles[app] };\n}\n\n/**\n * Open an email app on the compose screen, or let the user choose what app to open on the compose screen.\n *\n * @param {{\n *     app: string | undefined | null,\n *     title: string,\n *     message: string,\n *     cancelLabel: string,\n *     removeText: boolean,\n *     to: string,\n *     cc: string,\n *     bcc: string,\n *     subject: string,\n *     body: string,\n *     encodeBody: boolean\n * }} options\n */\nexport async function openComposer(options) {\n  const app = await getApp(options);\n\n  if (!app) {\n    return null;\n  }\n\n  if (options.encodeBody) {\n    options.body = encodeURIComponent(options.body);\n  }\n\n  const params = getUrlParams(app, options);\n  let prefix = prefixes[app];\n\n  if (app === \"apple-mail\") {\n    // apple mail prefix to compose an email is mailto\n    prefix = \"mailto:\";\n  }\n\n  await Linking.openURL(`${prefix}${params}`);\n  return { app, title: titles[app] };\n}\n"]},"metadata":{},"sourceType":"module"}